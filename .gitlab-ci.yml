# This file is a template, and might need editing before it works on your project.
# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/

stages:
    - build
    - test

# Install dependencies for GCC builds
before_script:
    - apt-get update &&
      apt-get install -y
        libboost-system-dev
        libboost-filesystem-dev
        libboost-program-options-dev
        libboost-thread-dev
        libboost-regex-dev
        libprotobuf-dev
        protobuf-compiler
        libprotobuf-c0-dev
        protobuf-c-compiler
        libyaml-cpp-dev
        libyaml-dev


### GCC 5
build:gcc:5:
  image: gcc:5
  stage: build

  script:
        - ./bootstrap.sh
        - mkdir build && cd build
        - ../configure 
            --enable-tests 
        - make -j4 CPPFLAGS="-D_GLIBCXX_USE_CXX11_ABI=0"
        - cd tests
        - make -j4 CPPFLAGS="-D_GLIBCXX_USE_CXX11_ABI=0" core
        - make -j4 CPPFLAGS="-D_GLIBCXX_USE_CXX11_ABI=0" api


### GCC 6
build:gcc:6:
  image: gcc:6
  stage: build

  script:
        - ./bootstrap.sh
        - mkdir build && cd build
        - ../configure 
            --enable-tests 
        - make -j4 CPPFLAGS="-D_GLIBCXX_USE_CXX11_ABI=0"
        - cd tests
        - make -j4 CPPFLAGS="-D_GLIBCXX_USE_CXX11_ABI=0" core
        - make -j4 CPPFLAGS="-D_GLIBCXX_USE_CXX11_ABI=0" api


### GCC 7
build:gcc:7:
  image: gcc:7
  stage: build

  script:
        - ./bootstrap.sh
        - mkdir build && cd build
        - ../configure 
            --enable-tests 
        - make -j4
        - cd tests
        - make -j4
        - make -j4


### GCC 8
build:gcc:8:
  image: gcc:8
  stage: build

  script:
        - ./bootstrap.sh
        - mkdir build && cd build
        - ../configure 
            --enable-tests 
        - make -j4
        - cd tests
        - make -j4
        - make -j4


################################################################################
# test scripts
################################################################################
test:ubuntu:latest:
    image: ubuntu:latest
    stage: test

    # Install dependencies
    before_script:
        - apt-get update &&
          apt-get upgrade -y &&
          apt-get install -y
            build-essential
            autotools-dev
            automake
            autoconf
            libtool
            pkg-config
            libboost-system-dev
            libboost-filesystem-dev
            libboost-program-options-dev
            libboost-thread-dev
            libboost-regex-dev
            libprotobuf-dev
            protobuf-compiler
            libprotobuf-c-dev
            protobuf-c-compiler
            libyaml-cpp-dev
            libyaml-dev
            libcap2-bin
            valgrind
          
    # Build and test
    script:
        - ./bootstrap.sh
        - mkdir build && cd build
        - ../configure 
            --enable-tests 
#            CFLAGS="-fsanitize=address"
#            CXXFLAGS="-fsanitize=address"
#            LDFLAGS="-fsanitize=address"
#            CPPFLAGS="-D__LOGGER_ENABLE_DEBUG__"
        - make -j4
        - cd tests
        - make -j4 core
        - ./core -as
        - make -j4 api
#        - NORNS_DEBUG_OUTPUT_TO_STDERR=1 NORNS_DEBUG_CONFIG_FILE_OVERRIDE=1 ./api
        - NORNS_DEBUG_CONFIG_FILE_OVERRIDE=1 ./api -as "[api::nornsctl_register_namespace]"
        - NORNS_DEBUG_CONFIG_FILE_OVERRIDE=1 ./api -as "[api::nornsctl_unregister_namespace]"
        - NORNS_DEBUG_CONFIG_FILE_OVERRIDE=1 ./api -as "[api::norns_submit_copy_local_posix_files]"
        - NORNS_DEBUG_CONFIG_FILE_OVERRIDE=1 ./api -as "[api::norns_submit_copy_buffer_to_file]"
        - NORNS_DEBUG_CONFIG_FILE_OVERRIDE=1 ./api -as "[api::nornsctl_register_job]"
        - NORNS_DEBUG_CONFIG_FILE_OVERRIDE=1 ./api -as "[api::nornsctl_update_job]"
        - NORNS_DEBUG_CONFIG_FILE_OVERRIDE=1 ./api -as "[api::nornsctl_unregister_job]"
        - NORNS_DEBUG_CONFIG_FILE_OVERRIDE=1 ./api -as "[api::nornsctl_add_process]"
        - NORNS_DEBUG_CONFIG_FILE_OVERRIDE=1 ./api -as "[api::nornsctl_remove_process]"
        - NORNS_DEBUG_CONFIG_FILE_OVERRIDE=1 ./api -as "[api::norns_resource_init]"
        - NORNS_DEBUG_CONFIG_FILE_OVERRIDE=1 ./api -as "[api::norns_iotask_init]"
        - NORNS_DEBUG_CONFIG_FILE_OVERRIDE=1 ./api -as "[api::NORNS_TASK]"
        - NORNS_DEBUG_CONFIG_FILE_OVERRIDE=1 ./api -as "[api::norns_submit]"
        - NORNS_DEBUG_CONFIG_FILE_OVERRIDE=1 ./api -as "[api::norns_status]"
        - NORNS_DEBUG_CONFIG_FILE_OVERRIDE=1 ./api -as "[api::nornsctl_status]"
        - NORNS_DEBUG_CONFIG_FILE_OVERRIDE=1 ./api -as "[api::nornsctl_send_command]"
        - NORNS_DEBUG_CONFIG_FILE_OVERRIDE=1 ./api -as "[api::norns_submit_remove_local_posix_files]"
    after_script:
        - pwd
        - if [[ -e tests.log ]]; 
          then
              cat $(tail -1 tests.log)/config/urd.log;
          fi
