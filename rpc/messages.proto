package norns.rpc;

message Request {

    // oneof would be better here, but the version of protoc provided by
    // CentOS 7 does not support it yet
    enum Type {
        SUBMIT_IOTASK = 1;
        PING = 2;
        REGISTER_JOB = 3;
        UPDATE_JOB = 4;
        UNREGISTER_JOB = 5;
        ADD_PROCESS = 6;
        REMOVE_PROCESS = 7;
        REGISTER_BACKEND = 8;
        UPDATE_BACKEND = 9;
        UNREGISTER_BACKEND = 10;
    }

    // I/O task descriptor
    message Task {

        message MemoryBuffer {
            required uint64 address = 1;//XXX probably not needed
            required uint32 size = 2;
        };

        message FSPath {
            optional string hostname = 1;
            required string datapath = 2;
        };

        message DataIn {

            required uint32 type = 1;
            optional MemoryBuffer buffer = 2;
            optional FSPath path = 3;
        };

        message DataOut {
            required uint32 type = 1;
            required FSPath path = 2;
        };

//        required uint32 taskid = 1;
        required uint32 optype = 1;
        required DataIn source = 2;
        required DataOut destination = 3;
    }

    // job descriptor
    message Job {
        repeated string hosts = 1;
        repeated Backend backends = 2;
    }

    // process descriptor
    message Process {
        required int64 uid = 1;
        required int64 gid = 2;
        required int64 pid = 3;
    }

    // backend descriptor
    message Backend {
        required int32 type = 1;
        required string prefix = 2;
        required string mount = 3;
        required int32 quota = 4;
    }

    required Type type = 1;
    optional Task task = 2;
    optional uint32 jobid = 3;
    optional Job job = 4;
    optional Process process = 5;
    optional string prefix = 6;
    optional Backend backend = 7;
}

message Response {

    // oneof would be better here, but the version of protoc provided by
    // CentOS 7 does not support it yet
    enum Type {
        SUBMIT_IOTASK = 1;
        PING = 2;
        REGISTER_JOB = 3;
        UPDATE_JOB = 4;
        UNREGISTER_JOB = 5;
        ADD_PROCESS = 6;
        REMOVE_PROCESS = 7;
        REGISTER_BACKEND = 8;
        UPDATE_BACKEND = 9;
        UNREGISTER_BACKEND = 10;
        BAD_REQUEST = 11;
    }

    // most responses only need to return a status code
    required Type type = 1;
    required uint32 status = 2;
    optional uint32 taskid = 3;
}


