# Copyright (C) 2017 Barcelona Supercomputing Center
#                    Centro Nacional de Supercomputacion
#
# This file is part of the Data Scheduler, a daemon for tracking and managing
# requests for asynchronous data transfer in a hierarchical storage environment.
#
# See AUTHORS file in the top level directory for information
# regarding developers and contributors.
#
# The Data Scheduler is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Data Scheduler is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Data Scheduler.  If not, see <http://www.gnu.org/licenses/>.
#

ACLOCAL_AMFLAGS = -I m4

bin_PROGRAMS = urd

################################################################################
# build 'urd_aux.la', a convenience library so that we can build both the daemon
# and any tests that may need it
################################################################################
noinst_LTLIBRARIES = \
	liburd_aux.la

MOSTLYCLEANFILES = \
	defaults.cpp \
	messages.pb.cc \
	messages.pb.h

liburd_aux_la_SOURCES = \
	$(top_srcdir)/rpc/norns-rpc.h \
	api.hpp \
	api/dispatch-table.hpp \
	api/listener.hpp \
	api/message.hpp \
	api/request.hpp \
	api/request.cpp \
	api/response.hpp \
	api/response.cpp \
	backends.hpp \
	backends/backend-base.cpp \
	backends/backend-base.hpp \
	backends/lustre-fs.cpp \
	backends/lustre-fs.hpp \
	backends/nvml-dax.cpp \
	backends/nvml-dax.hpp \
	backends/posix-fs.cpp \
	backends/posix-fs.hpp \
	backends/process-memory.cpp \
	backends/process-memory.hpp \
	backends/remote-backend.cpp \
	backends/remote-backend.hpp \
	defaults.hpp \
	io-task.cpp \
	io-task.hpp \
	thread-pool.hpp \
	pool/thread-pool.hpp \
	pool/thread-pool-queue.hpp \
	resources.hpp \
	resources/local-path.hpp \
	resources/memory-buffer.hpp \
	resources/remote-path.hpp \
	resources/resource-base.hpp \
	resources/shared-path.hpp \
	settings.cpp \
	settings.hpp \
	urd.cpp	\
	urd.hpp	\
	utils.cpp \
	utils.hpp

nodist_liburd_aux_la_SOURCES = \
	defaults.cpp \
	messages.pb.cc \
	messages.pb.h

liburd_aux_la_CXXFLAGS = \
	@TBB_CFLAGS@ \
	-std=gnu++11 -Wall -Wextra

liburd_aux_la_CPPFLAGS = \
	-DSPDLOG_ENABLE_SYSLOG \
	@BOOST_CPPFLAGS@ \
	-I$(top_srcdir)/include \
	-I$(top_srcdir)/src	\
	-I$(top_srcdir)/rpc	\
	-I$(top_builddir)/rpc

liburd_aux_la_LDFLAGS = \
	@TBB_LIBS@ \
    @BOOST_ASIO_LIB@ \
	@BOOST_LDFLAGS@	\
    @BOOST_PROGRAM_OPTIONS_LIB@	\
    @BOOST_SYSTEM_LIB@ \
    @BOOST_THREAD_LIB@ \
	@PROTOBUF_LIBS@ \
	-pthread

BUILT_SOURCES = \
	defaults.hpp \
	messages.pb.cc \
	messages.pb.h

defaults.cpp: Makefile
	@( echo "/* This file autogenerated by Makefile */"; \
	   echo "#include \"defaults.hpp\""; \
	   echo ""; \
	   echo "namespace defaults {"; \
	   echo "    const char* progname           = \"urd\";"; \
	   echo "    const bool  daemonize          = true;"; \
	   echo "    const bool  use_syslog         = false;"; \
	   echo "    const char* running_dir        = \"/tmp\";"; \
	   echo "    const char* ipc_sockfile       = \"/tmp/urd.socket\";"; \
	   echo "    const char* daemon_pidfile     = \"/tmp/urd.pid\";"; \
	   echo "    const uint32_t workers_in_pool = std::thread::hardware_concurrency();"; \
	   echo "    const char* config_file        = \"$(sysconfdir)/norns.conf\";"; \
	   echo "} // namespace defaults"; \
	 ) > $@

%.pb.cc %.pb.h: $(top_srcdir)/rpc/%.proto
	$(PROTOC) --proto_path=$(top_srcdir)/rpc --cpp_out=$(builddir) $^

################################################################################
# build 'urd', the main binary for the service daemon
################################################################################
urd_SOURCES = \
	main.cpp

urd_CXXFLAGS = \
	@TBB_CFLAGS@ \
	-std=gnu++11 -Wall -Wextra

urd_CPPFLAGS = \
	-DSPDLOG_ENABLE_SYSLOG \
	@BOOST_CPPFLAGS@ \
	-I$(top_srcdir)/include \
	-I$(top_srcdir)/src	\
	-I$(top_srcdir)/rpc	\
	-I$(top_builddir)/rpc


# NOTE: we cannot pass 'liburd_aux.la' directly to 'urd_LDFLAGS' as usual,
# because backends rely on the initialization of several static (and 
# unreferenced) variables to self-register, so that they can be automatically 
# constructed. Since they are not referenced elsewhere, the linker removes
# the variables, which makes the self-registering process not work. To avoid 
# this, we need to link the convenience library with '-Wl,--whole-archive'
# to force the inclusion of these symbols and then disable it with 
# '-Wl,--no-whole-archive'. Unfortunately, the order of flags
# cannot be controlled, which forces us to define it explicitly as
# '-Wl,--whole-archive,.libs/liburd_aux.a,--no-whole-archive' and to include
# several extra dependencies which would not be needed otherwise
urd_LDFLAGS = \
	@TBB_LIBS@ \
    @BOOST_ASIO_LIB@ \
	@BOOST_LDFLAGS@	\
    @BOOST_PROGRAM_OPTIONS_LIB@	\
    @BOOST_SYSTEM_LIB@ \
    @BOOST_THREAD_LIB@ \
	@PROTOBUF_LIBS@ \
	-Wl,--whole-archive,.libs/liburd_aux.a,--no-whole-archive

# we also need to include it as an additional dependency, since automake
# will no longer detect it as a dependency
EXTRA_urd_DEPENDENCIES = \
	liburd_aux.la
